<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>アルゴリズム on InTheDayDream</title>
    <link>http://inthebloom.github.io/tags/%E3%82%A2%E3%83%AB%E3%82%B4%E3%83%AA%E3%82%BA%E3%83%A0/</link>
    <description>Recent content in アルゴリズム on InTheDayDream</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Sat, 19 Oct 2024 00:00:00 +0000</lastBuildDate><atom:link href="http://inthebloom.github.io/tags/%E3%82%A2%E3%83%AB%E3%82%B4%E3%83%AA%E3%82%BA%E3%83%A0/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Functional GraphでK回進むクエリ in &lt;O(NlogN), O(logN)&gt;</title>
      <link>http://inthebloom.github.io/post/functional-graph-logn-simulation/</link>
      <pubDate>Sat, 19 Oct 2024 00:00:00 +0000</pubDate>
      
      <guid>http://inthebloom.github.io/post/functional-graph-logn-simulation/</guid>
      <description>概要 次の問題を$\langle O(N\log N), O(\log N) \rangle$で解くアルゴリズムを紹介します。</description>
    </item>
    
    <item>
      <title>比較的シンプルなクイックソートとマージソートの実装</title>
      <link>http://inthebloom.github.io/post/simple-nlogn-sort/</link>
      <pubDate>Thu, 10 Oct 2024 00:00:00 +0000</pubDate>
      
      <guid>http://inthebloom.github.io/post/simple-nlogn-sort/</guid>
      <description>はじめに 比較的頭を壊しにくいクイックソートとマージソートの実装方針を共有します。 オーダーも悪化しません。定数倍はわかりませんが、最適実装に比べて高々2倍とかだと思います。(適当) 実装例はすべてC++です。
クイックソート 列を与えられたときに適切にswapしながら境界線を探すパートが最難関です。 この部分を2回に分けて行います。</description>
    </item>
    
    <item>
      <title>Range Kth Smallestに対する4つの解法と2つの実装例</title>
      <link>http://inthebloom.github.io/post/range-kth-smallest/</link>
      <pubDate>Sat, 07 Sep 2024 00:00:00 +0000</pubDate>
      
      <guid>http://inthebloom.github.io/post/range-kth-smallest/</guid>
      <description>問題 $N$要素の数列$A$が与えられる。$Q$個のクエリに解答せよ。
$A$の$[l _ i, r _ i)$内にある要素の中で$k _ i + 1$番目に小さい値を答える。 $1 \leq N \leq 2 \times 10 ^ 5, \quad 1 \leq Q \leq 2 \times 10 ^ 5, \quad 1 \leq A _ i \leq 10 ^ 9$</description>
    </item>
    
    <item>
      <title>[メモ] Functional Graph上のシミュレーション</title>
      <link>http://inthebloom.github.io/post/functional-graph-simulating/</link>
      <pubDate>Mon, 15 Apr 2024 00:00:00 +0000</pubDate>
      
      <guid>http://inthebloom.github.io/post/functional-graph-simulating/</guid>
      <description>概要 本稿において、$N$頂点$N$辺からなる有向グラフであって、すべての頂点の出次数が1であるグラフをfunctional graphと呼ぶ。
本稿の目的は、次の問題を時間計算量$O(N \log k)$で解く方法を簡潔にまとめることである。</description>
    </item>
    
    <item>
      <title>等比数列の和を計算する2つの対数時間アルゴリズム</title>
      <link>http://inthebloom.github.io/post/geometric-progression-sum/</link>
      <pubDate>Thu, 15 Feb 2024 00:00:00 +0000</pubDate>
      
      <guid>http://inthebloom.github.io/post/geometric-progression-sum/</guid>
      <description>概要 隣り合う2つの項の比が一定である数列を、等比数列という。 より厳密には、初項$a$、公比$r$によって定まる次の数列のことを指す。
$a_1 = a$ $a_i = ra_{i-1} ~ (2 \leq i)$ 本稿では、等比数列の最初の$n$項の和$S_n = a + ar + ar^2 + \dots ar^{n-1}$を任意の法$M$で割った非負最小剰余を$O(\log n)$時間で求めるアルゴリズムを紹介する。</description>
    </item>
    
    <item>
      <title>ミスりにくい二分探索 [UEC Advent Calendar 2023] 6日目</title>
      <link>http://inthebloom.github.io/post/uec-advent2023/</link>
      <pubDate>Tue, 05 Dec 2023 00:00:00 +0000</pubDate>
      
      <guid>http://inthebloom.github.io/post/uec-advent2023/</guid>
      <description>まえがき この記事は、 電通大生による電通大生のためのUEC Advent Calendar 2023 の6日目担当です。</description>
    </item>
    
    <item>
      <title>Functional Graphのサイクル検出をいい感じに</title>
      <link>http://inthebloom.github.io/post/functional-graph-cycle/</link>
      <pubDate>Fri, 13 Oct 2023 00:00:00 +0000</pubDate>
      
      <guid>http://inthebloom.github.io/post/functional-graph-cycle/</guid>
      <description>はじめに グラフ表現に帰着できる問題を考察していると、Functional Graphと呼ばれるグラフのサイクル検出に帰着する場合があります。 本稿では、Functional Graphのサイクル検出の比較的簡単な実装を紹介します。</description>
    </item>
    
    <item>
      <title>ワーシャル・フロイド法について調べて、納得したこと</title>
      <link>http://inthebloom.github.io/post/floyd-warshall/</link>
      <pubDate>Mon, 02 Oct 2023 00:00:00 +0000</pubDate>
      
      <guid>http://inthebloom.github.io/post/floyd-warshall/</guid>
      <description>はじめに 辺に任意の重みがある$N$頂点有向グラフ(ネットワーク)において、負の長さの閉路が存在しないとき、 全点対の最短経路を$O(N^3)$時間で求めるワーシャル・フロイド法と呼ばれるアルゴリズムが存在する。
本稿では、筆者がワーシャル・フロイド法について調べ、理解したことを記録する。
ワーシャル・フロイド法でできるもの 負閉路が存在しないネットワークにおいて、任意の2頂点間の最短経路を求める。</description>
    </item>
    
    <item>
      <title>繰り返し二乗法について</title>
      <link>http://inthebloom.github.io/post/modpow/</link>
      <pubDate>Sat, 05 Aug 2023 00:00:00 +0000</pubDate>
      
      <guid>http://inthebloom.github.io/post/modpow/</guid>
      <description>はじめに この度私のライブラリに冪乗の余りを求める、いわゆるmodPow関数を追加しました。 丁度いい機会ということで、本稿ではmodpowの仕組みを説明し、詳細な実装方法と実装例を示します。 数学をガバっていたらすみません。
modpowとは 以下、$\times{}$は整数の積を表します。</description>
    </item>
    
  </channel>
</rss>
